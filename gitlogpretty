#!/usr/bin/perl
# git log pretty formatting, one commit per line
#
# Usage: gitlogpretty [options] [git options]
#             --myselect    select branch to display
#             --remote      show remote branches
#             --all         git log --all + show remote branches

my $author_max = 15;        # max author length
my $extra = "";             # extra git options
my $hide_remote = 1;        # hide remote branches
my $width = 59;             # formatting

#my $style = "plain";
#my $style = "italian";
#my $style = "lemon";
my $style = "matrix";

# Colored ascii-art for branches when running with --graph ?
my $opts = "--color";
# $opts = "";


######################################################################################################

# cmdline options
for (; @ARGV; shift(@ARGV)) {
    if ($ARGV[0] eq "--myselect" ) {
	my $cmd = 'myselect $(git branch | sed -e "s/\*//")';
	$extra .= " " . `bash -c '$cmd' `;
	($extra) || exit 0;
	next;
    }

    if ($ARGV[0] eq "--remote")  {  $hide_remote = 0; next;  }
    if ($ARGV[0] eq "--all")     {  $hide_remote = 0; $width = 79; $extra .= " --all"; next;  }
    
    last;   # Unrecognized options, pass to git
}


# String length without ansi color codes
sub real_length
{
    my ($s) = @_;
    $s =~ s/\e\[[^m]*m//g;
    return length($s);
}


# Hide remote branches if needed 
# Display branches and tags as "(branches) <tags>"
sub format_branches
{ 
    my ($branches) = @_;
    my @branches; my @tags;

    # Split tags and branches
    $branches =~ s|^ \((.*)\)|$1|;   # remove surrounding ()
    foreach my $b (split(/, /, $branches))  {
        if ($b =~ m/^tag: (.*)/)  {  push(@tags, $1);  }
        else                      {  push(@branches, $b);  }
    }

    # Hide remote/HEAD
    @branches = grep(!/\/HEAD/, @branches);

    # Hide remote branches
    if ($hide_remote)  {  @branches = grep(!/\//, @branches);  }

    $branches = "";
    if (@branches) { $branches =  sprintf(" (%s)", join(", ", @branches)); }
    if (@tags)     { $branches .= sprintf(" <%s>", join(", ", @tags)); }
    return $branches;
}


######################################################################################################
# Styles

# Color codes
my $end  = "\e[0m";
my $bold = "\e[1m";

my %colors = (
    "grey"            => "\e[40;30;1m",
    "bold_red"        => "\e[40;31;1m",
    "bold_green"      => "\e[40;32;1m",
    "bold_yellow"     => "\e[40;33;1m",
    "bold_blue"       => "\e[40;34;1m",
    "bold_purple"     => "\e[40;35;1m",
    "bold_light_blue" => "\e[40;36;1m",
    "bold"            => "\e[40;37;1m",

    "invisible"  => "\e[40;30m",
    "black"      => "\e[40;30m",
    "red"        => "\e[40;31m",
    "green"      => "\e[40;32m",
    "yellow"     => "\e[40;33m",
    "blue"       => "\e[40;34m",
    "purple"     => "\e[40;35m",
    "light_blue" => "\e[40;36m",
    "white"      => "\e[40;37m",
);

my %style;

if ($style eq "matrix") {
    %style = ("author" => "green",
	      "hash"   => "bold_green",
	      "time"   => "green",
	      "branch" => "bold_green",
	      "text"   => "green",
	      "merge"   => "bold_green");   # "Merge pull request ..."
}

if ($style eq "italian") {
    %style = ("author" => "normal",
	      "hash"   => "red",
	      "time"   => "green",
	      "branch" => "bold_green",
	      "text"   => "green",
	      "merge"  => "white");
}

if ($style eq "lemon") {
    %style = ("author" => "yellow",
	      "hash"   => "white",
	      "time"   => "white",
	      "branch" => "bold_yellow",
	      "text"   => "white",
	      "merge"  => "yellow");
}

sub style
{  
    my ($s) = @_;
    return $colors{$style{$s}};
}

######################################################################################################
# Formatting

# Note: '###' = field separator for us
my $format = "###%an###%h###%ad###%d###%s";

# Format / filter branches and align fields
# Don't run with --graph by default, slow on large repos and messes up formatting.
open(IN, "git log --pretty=format:'$format' $opts --date=short @ARGV $extra |");
open(OUT,"| less -cRS");
binmode IN,  ':encoding(UTF-8)';
binmode OUT, ':encoding(UTF-8)';

my $lines = 0;
while (my $str = <IN>)
{
    $lines++;
    if ($str !~ m/###/)  {  print OUT $str; next;  }

    my ($head, $author, $hash, $time, $branches, $text) = split(/###/, "$str");
    chomp($text);

    if ($branches)  {  $branches = format_branches($branches);  }

    # Just keep last name if author too long.
    if (length($author) > $author_max)  {  $author =~ s/.* //;  }

    # Highlight merges 
    if (!real_length($head))    # running without --graph
    {  if ($text =~ m/^Merge pull request/)  {  $head = "* $h";  } else {  $head = "  ";  }  }    
    if ($text =~ m/^Merge pull request/)  {  $text = $end . style("merge") . $text;  }

    # Apply style
    $author   = style("author") . $author   . $end;
    $hash     = style("hash")   . $hash     . $end;
    $time     = style("time")   . $time     . $end;
    $branches = style("branch") . $branches . $end;
    $text     = style("text")   . $text     . $end;
    
    my $n = $author_max - real_length($author);
    my $str = sprintf("$head%s$author $hash $time $branches", " " x $n);

    my $n = $width - real_length($str);
    printf OUT ("$str%s %s\n", " " x $n, $text);
}

